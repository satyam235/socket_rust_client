name: Rust Cross-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }} for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rust-socket-agent-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rust-socket-agent-linux-arm64

          # Windows builds  
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rust-socket-agent-windows-x86_64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: rust-socket-agent-windows-arm64.exe

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rust-socket-agent-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rust-socket-agent-macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    # Linux ARM cross-compilation requires additional steps
    - name: Install ARM cross-compilation tools (Linux)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    # Windows ARM cross-compilation might require additional setup
    - name: Setup Windows ARM cross-compilation
      if: matrix.target == 'aarch64-pc-windows-msvc'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Add target
      run: rustup target add ${{ matrix.target }}

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}

    - name: Rename binary
      shell: bash
      run: |
        cp target/${{ matrix.target }}/release/$(find target/${{ matrix.target }}/release -maxdepth 1 -type f -executable -printf "%f\n" | head -n 1) ${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}
        
  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          rust-socket-agent-linux-x86_64
          rust-socket-agent-linux-arm64
          rust-socket-agent-windows-x86_64.exe
          rust-socket-agent-windows-arm64.exe
          rust-socket-agent-macos-x86_64
          rust-socket-agent-macos-arm64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}